library(truncnorm)
a=1
b=0.1

pf=function(y, N) {
  # Initialize particles
  particles=data.frame(
    phi=exp(rtruncnorm(N,a=-1,b=1,mean=0.1,sd=2)),
    tau=rgamma(N,a,b),
    w=runif(N,0,1000),
    x=7.75
  )
  
  updated.particles=list()
  
  # Iterating over each time point
  for (t in 1:length(y)) {
    # Update particles
    epsilon=rnorm(N,0.01,sqrt(1/particles$tau))
    particles$x=particles$phi*particles$x+epsilon
    
    # Calculate likelihood weights
    weights=dnorm(y[t], mean=particles$x, sd=sqrt(1/particles$w))
    weights=weights/sum(weights)
    
    # Resampling
    index=sample(1:N, N, replace = TRUE, prob = weights)
    particles=particles[index, ]
    
    # Store updated particles
    updated.particles[[t]]=particles
  }
  
  return(updated.particles)
}



set.seed(5090)
N=5000 # Number of particles  
#y=arima.sim(n=100, list(ar=0.8))  # Simulated observation data
y=read.csv("C://Users//Thf12//OneDrive - University of Canterbury//STAT395//USD_HKD2.csv")
y$date <- as.Date(y$date, format="%d/%m/%Y")
results=pf(y[,2], N)


##############################################################################Table 2
# 提取最后时间点的粒子
last_particles=results[[length(y)]]

# 计算每个参数的后验统计量
posterior_summary=function(particles, param) {
  mean_val=mean(particles[[param]])
  sd_val=sd(particles[[param]])
  ci=quantile(particles[[param]], probs = c(0.1, 0.9))
  list(mean = mean_val, sd = sd_val, ci = ci)
}

summary_phi=posterior_summary(last_particles, "phi")
summary_tau =posterior_summary(last_particles, "tau")
summary_w=posterior_summary(last_particles, "w")

# 打印统计量
print(summary_phi)
print(summary_tau)
print(summary_w)



###################################################################################Figure 7
# 计算95%置信区间
ci_lower=sapply(results, function(p) quantile(p$x, probs = 0.025))
ci_upper=sapply(results, function(p) quantile(p$x, probs = 0.975))

# 将置信区间限制在7.8以下
#ci_lower= pmin(ci_lower, 7.8)
#ci_upper= pmin(ci_upper, 7.8)

# 添加置信区间到数据框
df$ci_lower=ci_lower
df$ci_upper=ci_upper


ggplot(df) +
  geom_line(aes(x = time, y = observed_state, colour = "Observed State"), linetype = "dashed") +
  geom_line(aes(x = time, y = estimated_states, colour = "Estimated State")) +
  geom_ribbon(aes(x = time, ymin = ci_lower, ymax = ci_upper, fill = "Confidence Interval"), alpha = 0.2) +
  ggtitle("Comparison of Observed and Estimated States with 95% Confidence Interval") +
  xlab("Time") + ylab("State") +
  scale_colour_manual("", 
                      values = c("Observed State" = "blue", "Estimated State" = "red")) +
  scale_fill_manual("", 
                    values = c("Confidence Interval" = "red")) +
  theme_minimal() +
  ylim(7.55,7.95) +
  guides(colour = guide_legend(title = ""), fill = guide_legend(title = ""))


##################################################################################Figure 7
library(ggplot2)
library(ggpubr)

# 计算估计值和观测值的分位数
qq_data=qqplot(df$observed_state, df$estimated_state, plot.it = FALSE)
qq_df=data.frame(observed_quantiles = qq_data$x, estimated_quantiles = qq_data$y)

# 绘制QQ图
ggplot(qq_df, aes(x = observed_quantiles, y = estimated_quantiles)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "blue") +
  ggtitle("QQ Plot of Observed vs. Estimated States") +
  xlab("Quantiles of Observed State") + ylab("Quantiles of Estimated State") +
  theme_minimal()







